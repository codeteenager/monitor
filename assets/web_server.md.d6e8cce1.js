import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.00fcd53e.js";const p="/monitor/image/17.png",o="/monitor/image/16.png",m=JSON.parse('{"title":"监控服务","description":"","frontmatter":{},"headers":[],"relativePath":"web/server.md","filePath":"web/server.md","lastUpdated":1687321477000}'),e={name:"web/server.md"},r=l('<h1 id="监控服务" tabindex="-1">监控服务 <a class="header-anchor" href="#监控服务" aria-label="Permalink to &quot;监控服务&quot;">​</a></h1><p><img src="'+p+`" alt=""></p><h2 id="数据接入层" tabindex="-1">数据接入层 <a class="header-anchor" href="#数据接入层" aria-label="Permalink to &quot;数据接入层&quot;">​</a></h2><p>一般通过提供独立的日志服务器接收客户端日志，接收过程中，要对客户端日志内容的合法性、安全性等进行甄别，防止被人攻击。而且由于日志提交一般都比较频繁，多客户端同时并发的情况也常见。通过消息队列将日志信息逐一处理后写入到数据库进行保存也是比较常用的方案。</p><p>在这里客户端借助 SDK 上报监控数据指标，数据接入层接收相应数据，并做协议转换等简单处理后，作为生产者向 Kafka 写入数据。</p><ul><li>解密上报的数据并验证其正确性；</li><li>加入一些客户端 SDK 无法拿到的字段：如 IP；</li><li>转发处理过后的数据。</li></ul><p>为什么不是直接存入呢？</p><p>因为客户端上报的监控数据量和用户规模有关。如果直接入库，遇到高并发的时候，会因为服务器扛不住而导致数据丢失。与此同时，因为数据下游（数据的使用方，如数据清洗计算平台，监控预警模块）会有多个数据接收端，直接入库的话也会造成数据重复。</p><p>所以最好我们选择 Kafka，先让数据写进消息队列。Kafka 能通过缓存，慢慢接收这些数据，降低流量洪峰压力。同时，消息队列还有接收数据后将其删除的特点，可以避免数据重复的问题。</p><h2 id="数据清洗层" tabindex="-1">数据清洗层 <a class="header-anchor" href="#数据清洗层" aria-label="Permalink to &quot;数据清洗层&quot;">​</a></h2><table><thead><tr><th>方案</th><th>说明</th><th>缺点</th><th>优点</th></tr></thead><tbody><tr><td>File+Spark+Mysql+ELK</td><td>由后端通过Spark清洗数据⼊库Mysql，通过Logstash定时同步Es，由Es进⾏聚合计算</td><td>流程冗⻓、数据断层、查询效率低、服务容易宕机</td><td>易上⼿、搭建成本低</td></tr><tr><td>Kafka+Spark+ELK</td><td>Kafka取代⽂件读取，Spark清洗数据直接⼊库Es，Es进⾏聚合计算</td><td>指标数据开发受限、查询效率低、服务容易宕机</td><td>易上⼿、流程简化</td></tr><tr><td>Kafka+Flink+ELK</td><td>Flink取代Spark清洗数据</td><td>不易上⼿、维护成本⾼、指标数据拓展性不够灵活</td><td>查询效率达到秒级、⾼并发不宕机</td></tr><tr><td>Kafka+Flink+Clickhouse</td><td>ClickHouse取代ELK，Flink清洗明细数据，Clickhouse进⾏聚合计算</td><td>机器与集群维护压⼒⼤</td><td>查询效率达到毫秒级、数据拓展性强、成本下降</td></tr></tbody></table><p>Kafka 是一个比较早的消息队列，但是它是一个非常稳定的消息队列，有着众多的用户群体。我们考虑 Kafka 作为我们消息中间件的主要原因如下：</p><ul><li>高吞吐，低延迟：每秒几十万 QPS 且毫秒级延迟</li><li>高并发：支持数千客户端同时读写</li><li>容错性，可高性：支持数据备份，允许节点丢失</li><li>可扩展性：支持热扩展，不会影响当前线上业务</li></ul><p>Apache Flink 是近年来越来越流行的一款开源大数据流式计算引擎，它同时支持了批处理和流处理，考虑 Flink 作为我们流式计算引擎的主要因素是：</p><ul><li>高吞吐，低延迟，高性能</li><li>高度灵活的流式窗口</li><li>状态计算的 Exactly-once 语义</li><li>轻量级的容错机制</li><li>支持 EventTime 及乱序事件</li><li>流批统一引擎</li></ul><h2 id="获取ip地址" tabindex="-1">获取IP地址 <a class="header-anchor" href="#获取ip地址" aria-label="Permalink to &quot;获取IP地址&quot;">​</a></h2><p>IP地址是按地域分布的，服务器获取到客户端IP后可以做流量统计和分析。</p><h3 id="node-js获取客户端ip" tabindex="-1">Node.js获取客户端IP <a class="header-anchor" href="#node-js获取客户端ip" aria-label="Permalink to &quot;Node.js获取客户端IP&quot;">​</a></h3><ol><li>X-Forwarded-For (RFC 7239)</li></ol><p>通常 Server 端不会直接与 Client 端通信, 而是通过 Nginx 等代理接受客户端请求, 这时候 remoteAddress 是代理服务的地址, 无法描述客户端IP。</p><p>由此引入了HTTP 扩展协议头: X-Forwarded-For , 格式是:</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">X-Forwarded-For: client, proxy</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, proxy</span><span style="color:#79B8FF;">2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">X-Forwarded-For: client, proxy</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, proxy</span><span style="color:#005CC5;">2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>获取的时候取 X-Forwarded-For 的第一个 IP 地址即可，但需要注意的是: X-Forwarded-For 可伪造!</p><p>通常 Nginx 作为 proxy 时的配置:</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>X-Real-IP</li></ol><p>代理程序设置请求源的 IP 信息， 目前并不是 RFC 标准，X-Real-IP 不可伪造， 但仅能描述最近一个代理的真实IP， 如果有多级代理，仍旧不可作为真实客户端的 IP。</p><p>通常 Nginx 作为 proxy 时的配置:</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">proxy_set_header X-Real-IP $remote_addr;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">proxy_set_header X-Real-IP $remote_addr;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li>req.socket.remoteAddress</li></ol><p>在 Node.js 官方文档 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fnodejs.org%2Fapi%2Fnet.html%23net_socket_remoteaddress" target="_blank" rel="noreferrer">net_socket_remoteaddress</a> 中，我们得知可通过 req.socket.remtoeAddress 获取 Socket 连接的源 IP 地址信息。</p><p>根据官方文档 http_request_socket 的描述，req.connection 和 req.socket 是等价的，我们也可以通过 req.connection.remoteAddress 获取 Socket 连接的源 IP 信息。这种获取请求 IP 来源的方式，适用于客户端直连服务端的场景。</p><p>具体代码实现：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 获得请求发送方的 ip</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;">   </span><span style="color:#B392F0;">{Context}</span><span style="color:#6A737D;">  </span><span style="color:#E1E4E8;">ctx</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;">  </span><span style="color:#B392F0;">{string}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getIp</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">xRealIp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;X-Real-Ip&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">ip</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">remoteAddress</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.req.connection;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> xRealIp </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> ip </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> remoteAddress;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 获得请求发送方的 ip</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;">   </span><span style="color:#6F42C1;">{Context}</span><span style="color:#6A737D;">  </span><span style="color:#24292E;">ctx</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;">  </span><span style="color:#6F42C1;">{string}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getIp</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">xRealIp</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;X-Real-Ip&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">ip</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">remoteAddress</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.req.connection;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> xRealIp </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> ip </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> remoteAddress;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="java服务获取真实ip" tabindex="-1">Java服务获取真实IP <a class="header-anchor" href="#java服务获取真实ip" aria-label="Permalink to &quot;Java服务获取真实IP&quot;">​</a></h3><ol><li>X-Real-IP</li></ol><p>nginx代理一般会加上此请求头。</p><ol start="2"><li>X-Forwarded-For</li></ol><p>这是一个Squid开发的字段，只有在通过了HTTP代理或者负载均衡服务器时才会添加该项。</p><ol start="3"><li>Proxy-Client-IP 和 WL-Proxy-Client-IP</li></ol><p>这个一般是经过apache http服务器的请求才会有，用apache http做代理时一般会加上Proxy-Client-IP请求头，而WL-Proxy-Client-IP是它的weblogic插件加上的头。</p><ol start="4"><li>HTTP_CLIENT_IP</li></ol><p>有些代理服务器会加上此请求头。在网上搜了一下，有一个说法是：</p><ol start="5"><li>HTTP_X_FORWARDED_FOR</li></ol><p>简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理(比如APACHE代理)或者负载均衡服务器时才会添加该项。它不是RFC中定义的标准请求头信息，在squid缓存代理服务器开发文档中可以找到该项的详细介绍。如果有该条信息, 说明您使用了代理服务器，地址就是后面的数值。可以伪造。标准格式如下：X-Forwarded-For: client1, proxy1, proxy2</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getIpAddress</span><span style="color:#E1E4E8;">(HttpServletRequest request) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String Xip </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.</span><span style="color:#B392F0;">getHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;X-Real-IP&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    String XFor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.</span><span style="color:#B392F0;">getHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;X-Forwarded-For&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">Strings.</span><span style="color:#B392F0;">isNullOrEmpty</span><span style="color:#E1E4E8;">(XFor) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#9ECBFF;">&quot;unKnown&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equalsIgnoreCase</span><span style="color:#E1E4E8;">(XFor)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//多次反向代理后会有多个ip值，第一个ip才是真实ip</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> XFor.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (index </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> XFor.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, index);</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> XFor;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    XFor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Xip;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">Strings.</span><span style="color:#B392F0;">isNullOrEmpty</span><span style="color:#E1E4E8;">(XFor) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#9ECBFF;">&quot;unKnown&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equalsIgnoreCase</span><span style="color:#E1E4E8;">(XFor)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> XFor;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Strings.</span><span style="color:#B392F0;">nullToEmpty</span><span style="color:#E1E4E8;">(XFor).</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;unknown&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equalsIgnoreCase</span><span style="color:#E1E4E8;">(XFor)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      XFor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.</span><span style="color:#B392F0;">getHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Proxy-Client-IP&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Strings.</span><span style="color:#B392F0;">nullToEmpty</span><span style="color:#E1E4E8;">(XFor).</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;unknown&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equalsIgnoreCase</span><span style="color:#E1E4E8;">(XFor)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      XFor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.</span><span style="color:#B392F0;">getHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;WL-Proxy-Client-IP&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Strings.</span><span style="color:#B392F0;">nullToEmpty</span><span style="color:#E1E4E8;">(XFor).</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;unknown&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equalsIgnoreCase</span><span style="color:#E1E4E8;">(XFor)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      XFor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.</span><span style="color:#B392F0;">getHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;HTTP_CLIENT_IP&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Strings.</span><span style="color:#B392F0;">nullToEmpty</span><span style="color:#E1E4E8;">(XFor).</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;unknown&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equalsIgnoreCase</span><span style="color:#E1E4E8;">(XFor)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      XFor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.</span><span style="color:#B392F0;">getHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;HTTP_X_FORWARDED_FOR&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Strings.</span><span style="color:#B392F0;">nullToEmpty</span><span style="color:#E1E4E8;">(XFor).</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;unknown&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equalsIgnoreCase</span><span style="color:#E1E4E8;">(XFor)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      XFor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.</span><span style="color:#B392F0;">getRemoteAddr</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> XFor;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getIpAddress</span><span style="color:#24292E;">(HttpServletRequest request) {</span></span>
<span class="line"><span style="color:#24292E;">    String Xip </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">getHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;X-Real-IP&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    String XFor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">getHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;X-Forwarded-For&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Strings.</span><span style="color:#6F42C1;">isNullOrEmpty</span><span style="color:#24292E;">(XFor) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#032F62;">&quot;unKnown&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equalsIgnoreCase</span><span style="color:#24292E;">(XFor)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//多次反向代理后会有多个ip值，第一个ip才是真实ip</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> XFor.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> XFor.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, index);</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> XFor;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    XFor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Xip;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Strings.</span><span style="color:#6F42C1;">isNullOrEmpty</span><span style="color:#24292E;">(XFor) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#032F62;">&quot;unKnown&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equalsIgnoreCase</span><span style="color:#24292E;">(XFor)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> XFor;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Strings.</span><span style="color:#6F42C1;">nullToEmpty</span><span style="color:#24292E;">(XFor).</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;unknown&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equalsIgnoreCase</span><span style="color:#24292E;">(XFor)) {</span></span>
<span class="line"><span style="color:#24292E;">      XFor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">getHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Proxy-Client-IP&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Strings.</span><span style="color:#6F42C1;">nullToEmpty</span><span style="color:#24292E;">(XFor).</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;unknown&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equalsIgnoreCase</span><span style="color:#24292E;">(XFor)) {</span></span>
<span class="line"><span style="color:#24292E;">      XFor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">getHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;WL-Proxy-Client-IP&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Strings.</span><span style="color:#6F42C1;">nullToEmpty</span><span style="color:#24292E;">(XFor).</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;unknown&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equalsIgnoreCase</span><span style="color:#24292E;">(XFor)) {</span></span>
<span class="line"><span style="color:#24292E;">      XFor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">getHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;HTTP_CLIENT_IP&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Strings.</span><span style="color:#6F42C1;">nullToEmpty</span><span style="color:#24292E;">(XFor).</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;unknown&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equalsIgnoreCase</span><span style="color:#24292E;">(XFor)) {</span></span>
<span class="line"><span style="color:#24292E;">      XFor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">getHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;HTTP_X_FORWARDED_FOR&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Strings.</span><span style="color:#6F42C1;">nullToEmpty</span><span style="color:#24292E;">(XFor).</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;unknown&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equalsIgnoreCase</span><span style="color:#24292E;">(XFor)) {</span></span>
<span class="line"><span style="color:#24292E;">      XFor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">getRemoteAddr</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> XFor;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h2 id="获取地理位置" tabindex="-1">获取地理位置 <a class="header-anchor" href="#获取地理位置" aria-label="Permalink to &quot;获取地理位置&quot;">​</a></h2><p>当我们拿到客户端的公网IP后，就可以在页面直接查询对应IP的地理位置了，一般获取地理位置通过请求第三方接口来获取。这里我们通过一个开源库来获取。</p><ul><li><a href="https://github.com/lionsoul2014/ip2region" target="_blank" rel="noreferrer">ip2region</a>：有Java版本的，有Node.js版本的</li></ul><h2 id="ua解析" tabindex="-1">UA解析 <a class="header-anchor" href="#ua解析" aria-label="Permalink to &quot;UA解析&quot;">​</a></h2><p>用户代理(User Agent，简称 UA)，是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>解析 UA 字符串并不总是准确，因为有些用户可能会篡改 UA 字符串。因此，在使用解析 UA 字符串获取访问者信息时，需要注意这些信息可能不准确。</p></div><p>平台获取UA有两种方式：</p><ol><li>在JavaScript中，可以通过 <code>navigator.userAgent</code> 获取到当前浏览器的UA字符串</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">userAgent</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> navigator.userAgent;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(userAgent)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">userAgent</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> navigator.userAgent;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(userAgent)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>在服务器端，可以通过读取HTTP请求头中的<code>User-Agent</code>来获取UA字符串。</li></ol><p><img src="`+o+`" alt=""></p><p>获取到<code>User-Agent</code>之后，我们可以使用第三方库来解析 UA 字符串，例如 <a href="https://github.com/faisalman/ua-parser-js" target="_blank" rel="noreferrer">ua-parser-js</a> 和 <a href="https://github.com/blueconic/browscap-java" target="_blank" rel="noreferrer">browscap-java</a>。</p><p>使用 ua-parser-js 解析 UA 字符串示例代码如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">uaParser</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ua-parser-js&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parser</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">uaParser</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">userAgent</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parser.</span><span style="color:#B392F0;">setUA</span><span style="color:#E1E4E8;">(userAgent).</span><span style="color:#B392F0;">getResult</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(result);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* </span></span>
<span class="line"><span style="color:#6A737D;">  {</span></span>
<span class="line"><span style="color:#6A737D;">    ua      : &quot;&quot;,</span></span>
<span class="line"><span style="color:#6A737D;">    browser : {},</span></span>
<span class="line"><span style="color:#6A737D;">    engine  : {},</span></span>
<span class="line"><span style="color:#6A737D;">    os      : {},</span></span>
<span class="line"><span style="color:#6A737D;">    device  : {},</span></span>
<span class="line"><span style="color:#6A737D;">    cpu     : {}</span></span>
<span class="line"><span style="color:#6A737D;">  } </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">uaParser</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ua-parser-js&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parser</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">uaParser</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">userAgent</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parser.</span><span style="color:#6F42C1;">setUA</span><span style="color:#24292E;">(userAgent).</span><span style="color:#6F42C1;">getResult</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(result);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* </span></span>
<span class="line"><span style="color:#6A737D;">  {</span></span>
<span class="line"><span style="color:#6A737D;">    ua      : &quot;&quot;,</span></span>
<span class="line"><span style="color:#6A737D;">    browser : {},</span></span>
<span class="line"><span style="color:#6A737D;">    engine  : {},</span></span>
<span class="line"><span style="color:#6A737D;">    os      : {},</span></span>
<span class="line"><span style="color:#6A737D;">    device  : {},</span></span>
<span class="line"><span style="color:#6A737D;">    cpu     : {}</span></span>
<span class="line"><span style="color:#6A737D;">  } </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>解析UA后获取浏览器名称和版本，设备型号、类型、供应商，当前浏览器引擎名称和版本，正在运行的操作系统名称和版本， CPU 架构设计名称以及用户代理字符串。</p><h2 id="sourcemap反解" tabindex="-1">SourceMap反解 <a class="header-anchor" href="#sourcemap反解" aria-label="Permalink to &quot;SourceMap反解&quot;">​</a></h2><p>这个过程主要依赖两个库：<a href="https://github.com/mozilla/source-map" target="_blank" rel="noreferrer">source-map</a> 和 <a href="https://github.com/xpl/stacktracey" target="_blank" rel="noreferrer">stacktracey</a>，一个用于解析sourceMap 还原源码，另一个用于解析错误堆栈。</p><p>首先使用 stacktracey 解析错误堆栈，我们从错误堆栈中解析出了报错的文件以及代码的行列位置，其实就是异常堆栈中的编译后文件的文件名和行列号，我们甚至可以自己解析。下一步我们将基于这些信息去寻找报错的源码。</p><p>业界为我们提供了方便的SourceMap反解工具，利用Mozilla的<a href="https://github.com/mozilla/source-map" target="_blank" rel="noreferrer">source-map</a>库进行反解</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sourceMap</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;source-map&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fs&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseSourceMap</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 此处替换为你下载下来的 sourcemap 文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;../index.js.5d59fc.js.map&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">consumer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> sourceMap.</span><span style="color:#B392F0;">SourceMapConsumer</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">    consumer.</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 此处替换为原始报错的行列号</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">line</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">column</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">112003</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> c.</span><span style="color:#B392F0;">originalPositionFor</span><span style="color:#E1E4E8;">({ line, column });</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(s);</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`origin code for line: \${</span><span style="color:#E1E4E8;">line</span><span style="color:#9ECBFF;">}, \${</span><span style="color:#E1E4E8;">column</span><span style="color:#9ECBFF;">}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">\`======================================================================\`</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            c</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">sourceContentFor</span><span style="color:#E1E4E8;">(s.source)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(s.line </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">), s.line </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">\`======================================================================\`</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parseSourceMap;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sourceMap</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;source-map&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fs&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseSourceMap</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 此处替换为你下载下来的 sourcemap 文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;../index.js.5d59fc.js.map&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">consumer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> sourceMap.</span><span style="color:#6F42C1;">SourceMapConsumer</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">    consumer.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">c</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 此处替换为原始报错的行列号</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">line</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">column</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">112003</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> c.</span><span style="color:#6F42C1;">originalPositionFor</span><span style="color:#24292E;">({ line, column });</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(s);</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`origin code for line: \${</span><span style="color:#24292E;">line</span><span style="color:#032F62;">}, \${</span><span style="color:#24292E;">column</span><span style="color:#032F62;">}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">\`======================================================================\`</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            c</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">sourceContentFor</span><span style="color:#24292E;">(s.source)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(s.line </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">), s.line </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">\`======================================================================\`</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parseSourceMap;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>通过行号、列号以及SourceMap文件就可以将原始堆栈给反解出来，其实在线反解服务都是这么实现的。那么我们不可能在每次异常发生后再去反解，这样效率比较低，定位问题也比较慢。而线上部署代码也没有SourceMap文件的，有的话相当于把源码暴露给别人看了。</p><p>实际的解决方案是，利用各种打包插件或二进制工具在构建过程中将生成的SourceMap直接上传到服务端，上传完成后再删除SourceMap文件再去部署上线。</p><p>Sentry这款产品就有对应的上传插件，我们可以自定义一个webpack插件，只需配置应用ID、SourceMap路径和版本就可以。用户在发版构建时就可以完成SourceMap的上传工作，而异常发生后，就可以在清洗存储时通过反解服务自动完成解析，不需要用户再关心反解等相关工作了。</p><h2 id="异常聚合" tabindex="-1">异常聚合 <a class="header-anchor" href="#异常聚合" aria-label="Permalink to &quot;异常聚合&quot;">​</a></h2><p>通过SourceMap我们将异常错误解析成原始堆栈，但是大部分错误是有相似性的，这势必就要提到异常聚合这个关键问题。当当提到大部分错误是有相似性的，当用户量大的时候同一个错误可能会被上报上万次，如果我们上报一条存一条，并且展示给用户一条错误，那么平台侧错误列表会被重复的错误占满，这样的展示毫无意义，毕竟一个错误展示上千次还是一个错误。这种情况下，我们需要对错误进行分组和聚合，将具有相同特征的错误，归类为一种错误，并且只对用户暴露这种聚合后的错误列表，但是也会以小图展示错误数以及影响用户数。</p><p>那么聚合的逻辑是什么？怎么样聚合效果最好呢？</p><p>我们先观察一下JS错误所携带的信息，<code>name</code>错误类型、<code>message</code>错误信息、<code>stack</code>错误堆栈、<code>filename</code>文件名、<code>columnNumber</code>列号、<code>lineNumber</code>行号。这样聚合方案就出来了，利用某种方式将error的相关信息提取为<code>fingerprint</code>，每一次上报如果是相同的<code>fingerprint</code>那就归为一类，问题可以进一步细化为使用哪些字段聚合，如何生成指纹才尽可能准确。首先错误抛出的文件名和行列号没必要使用，有name和message我们就知道错误是什么，如果使用name和message聚合粒度太粗，这里参考了SENTRY的聚合策略，将反解后的堆栈进一步拆解为frame，每个frame包含调用文件名(filename)，调用函数名(function)和当前代码行(context line)。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GroupingComponent</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">contributes</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">values</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">GroupingComponents</span><span style="color:#F97583;">|</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">)[],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;exception&#39;</span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">&#39;type&#39;</span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">&#39;value&#39;</span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">&#39;stacktrace&#39;</span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">&#39;frame&#39;</span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">&#39;contextline&#39;</span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">&#39;filename&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GroupingComponent</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">contributes</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">values</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">GroupingComponents</span><span style="color:#D73A49;">|</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">)[],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">id</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;exception&#39;</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">&#39;type&#39;</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">&#39;value&#39;</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">&#39;stacktrace&#39;</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">&#39;frame&#39;</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">&#39;contextline&#39;</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">&#39;filename&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>将错误信息转化为GroupComponent对象，当堆栈反解完毕后自上而下递归检测，并且自下而上的生成一个个的嵌套GroupingComponent，最后再调用顶层的一个生成hash的方法，得到最终的一个hash值。</p><p>不参与hash计算的部分case：</p><ol><li>递归调用：当前frame与前一frame的filename、function、lineNumber、colNumber都一样</li><li>匿名路径：function为eval或<code>filename in[&quot;[native code]&quot;,&quot;native code&quot;,&quot;eval code&quot;,&quot;&lt;anonymous&gt;&quot;]</code>或者不为JS文件</li><li>计算开销过大：<code>contextLine.length&gt;120</code></li><li>匿名函数：<code>function in [&quot;?&quot;,&quot;&lt;anonymous function&gt;&quot;,&quot;&lt;anonymous&gt;&quot;,&quot;Anonymous function&quot;]</code>等</li></ol><h2 id="处理人分配" tabindex="-1">处理人分配 <a class="header-anchor" href="#处理人分配" aria-label="Permalink to &quot;处理人分配&quot;">​</a></h2><p>当将JS错误聚合展示消费后，需要让研发快速跟进修复，以提高站点的稳定性，如果是手动分配，会存在很大的局限性，需要有人定期巡检才行。如果能做到谁写得代码出现JS错误自动分配给谁，那么用起来就很舒适。</p><p>一般公司会用Gitlab/Github作为代码的远端仓库，而这些平台提供了丰富的api，协助用户做blame。通过api可以获取到目标文件每一行历史的所有作者信息。当我们通过SoureMap反解到堆栈信息后，通过open-api获取blame历史，我们就可以确定每一行的作者究竟是谁，从而将异常分配给他。</p><p>通过Git blame找到出错行的作者</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">blame</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-L</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">rang</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">fil</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">blame</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-L</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">rang</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">fil</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>我们需要几个信息</p><ul><li>线上报错的项目对应的源代码仓库名，如 toutiao-fe/slardar</li><li>线上报错的代码发生的版本，以及与此版本关联的 git commit 信息，为什么需要这些信息呢？</li></ul><p>默认用来 blame 的文件都是最新版本，但线上跑的不一定是最新版本的代码。不同版本的代码可能发生行的变动，从而影响实际代码的行号。如果我们无法将线上版本和用来 blame 的文件划分在统一范围内，则很有可能自动定位失败。</p><blockquote><p>因此，我们必须找到一种方法，确定当前 blame 的文件和线上报错的文件处于同一版本。并且可以直接通过版本定位到关联的源代码 commit 起止位置。这样的操作在 Sentry 的官方工具 Sentry-Cli 中亦有提供。</p></blockquote><p>通过 相关的 二进制工具，在代码发布前的脚本中提供当前将要发布的项目的版本和关联的代码仓库信息。同时在数据采集侧也携带相同的版本，线上异常发生后，我们就可以通过线上报错的版本找到原始文件对应的版本，从而精确定位到需要哪个时期的文件了。</p>`,87),t=[r];function c(E,y,i,u,F,d){return n(),a("div",null,t)}const C=s(e,[["render",c]]);export{m as __pageData,C as default};
